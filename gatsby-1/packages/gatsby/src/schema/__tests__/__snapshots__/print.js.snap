// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Print type definitions allows explicitly listing types to include without including field types 1`] = `
"### Type definitions saved at 2019-01-01 ###

type InlineTest implements Node & ITest @childOf(types: [\\"OneMoreTest\\"]) @dontInfer {
  first: Inline
  second(bar: Baz): Date @dateformat(formatString: \\"MM/DD/YYYY\\")
}"
`;

exports[`Print type definitions allows specifying types owned by plugins to exclude 1`] = `
"### Type definitions saved at 2019-01-01 ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: \\"Use \`birthTime\` instead\\")
  birthtimeMs: Float @deprecated(reason: \\"Use \`birthTime\` instead\\")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: \\"Use \`birthTime\` instead\\")
  birthtimeMs: Float @deprecated(reason: \\"Use \`birthTime\` instead\\")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

type Inline {
  foo: Nested
}

type Nested {
  baz: Boolean
}

input Baz {
  qux: Boolean
}

type InlineTest implements Node & ITest @childOf(types: [\\"OneMoreTest\\"]) @dontInfer {
  first: Inline
  second(bar: Baz): Date @dateformat(formatString: \\"MM/DD/YYYY\\")
}

interface ITest @nodeInterface {
  id: ID!
  date: Date @dateformat(formatString: \\"YYYY\\")
}

type BarChild implements Node @childOf(types: [\\"Test\\"]) @dontInfer {
  bar: String
}

type Test implements Node @dontInfer {
  foo: Int
}

type FooChild implements Node @childOf(types: [\\"Test\\"]) @dontInfer {
  bar: String
}"
`;

exports[`Print type definitions allows specifying types owned by plugins to include 1`] = `
"### Type definitions saved at 2019-01-01 ###

type InlineTest implements Node & ITest @childOf(types: [\\"OneMoreTest\\"]) @dontInfer {
  first: Inline
  second(bar: Baz): Date @dateformat(formatString: \\"MM/DD/YYYY\\")
}

interface ITest @nodeInterface {
  id: ID!
  date: Date @dateformat(formatString: \\"YYYY\\")
}

type Inline {
  foo: Nested
}

type Nested {
  baz: Boolean
}

input Baz {
  qux: Boolean
}

type BarChild implements Node @childOf(types: [\\"Test\\"]) @dontInfer {
  bar: String
}"
`;

exports[`Print type definitions allows specifying types to exclude 1`] = `
"### Type definitions saved at 2019-01-01 ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: \\"Use \`birthTime\` instead\\")
  birthtimeMs: Float @deprecated(reason: \\"Use \`birthTime\` instead\\")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: \\"Use \`birthTime\` instead\\")
  birthtimeMs: Float @deprecated(reason: \\"Use \`birthTime\` instead\\")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

type AnotherTest implements Node & ITest @dontInfer {
  nested: Nested
  date: Date @dateformat(formatString: \\"YYYY\\")
  hello(planet: String = \\"world\\", language: [Language!]!): String!
}

interface ITest @nodeInterface {
  id: ID!
  date: Date @dateformat(formatString: \\"YYYY\\")
}

type Nested {
  baz: Boolean
}

input Language {
  lang: String
  hello: String
}

type OneMoreTest implements Node @dontInfer {
  bar: Boolean
}

interface ITest2 implements Node {
  id: ID!
  date: Date @dateformat(formatString: \\"YYYY\\")
}

union ThisOrThat = AnotherTest | OneMoreTest

type Inline {
  foo: Nested
}

input Baz {
  qux: Boolean
}

type BarChild implements Node @childOf(types: [\\"Test\\"]) @dontInfer {
  bar: String
}

type Test implements Node @dontInfer {
  foo: Int
}

type FooChild implements Node @childOf(types: [\\"Test\\"]) @dontInfer {
  bar: String
}"
`;

exports[`Print type definitions allows specifying types to include (and includes interfaces and field types) 1`] = `
"### Type definitions saved at 2019-01-01 ###

type AnotherTest implements Node & ITest @dontInfer {
  nested: Nested
  date: Date @dateformat(formatString: \\"YYYY\\")
  hello(planet: String = \\"world\\", language: [Language!]!): String!
}

interface ITest @nodeInterface {
  id: ID!
  date: Date @dateformat(formatString: \\"YYYY\\")
}

type Nested {
  baz: Boolean
}

input Language {
  lang: String
  hello: String
}"
`;

exports[`Print type definitions saves correct type definitions 1`] = `
"### Type definitions saved at 2019-01-01 ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: \\"Use \`birthTime\` instead\\")
  birthtimeMs: Float @deprecated(reason: \\"Use \`birthTime\` instead\\")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: \\"Use \`birthTime\` instead\\")
  birthtimeMs: Float @deprecated(reason: \\"Use \`birthTime\` instead\\")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

type AnotherTest implements Node & ITest @dontInfer {
  nested: Nested
  date: Date @dateformat(formatString: \\"YYYY\\")
  hello(planet: String = \\"world\\", language: [Language!]!): String!
}

interface ITest @nodeInterface {
  id: ID!
  date: Date @dateformat(formatString: \\"YYYY\\")
}

type Nested {
  baz: Boolean
}

input Language {
  lang: String
  hello: String
}

type OneMoreTest implements Node @dontInfer {
  bar: Boolean
}

interface ITest2 implements Node {
  id: ID!
  date: Date @dateformat(formatString: \\"YYYY\\")
}

union ThisOrThat = AnotherTest | OneMoreTest

type Inline {
  foo: Nested
}

input Baz {
  qux: Boolean
}

type InlineTest implements Node & ITest @childOf(types: [\\"OneMoreTest\\"]) @dontInfer {
  first: Inline
  second(bar: Baz): Date @dateformat(formatString: \\"MM/DD/YYYY\\")
}

type BarChild implements Node @childOf(types: [\\"Test\\"]) @dontInfer {
  bar: String
}

type Test implements Node @dontInfer {
  foo: Int
}

type FooChild implements Node @childOf(types: [\\"Test\\"]) @dontInfer {
  bar: String
}"
`;
