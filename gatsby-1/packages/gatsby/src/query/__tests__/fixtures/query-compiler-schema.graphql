input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

scalar Date

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

type Directory implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  absolutePath: String
  contents: [FileOrDirectory!]!
}

union FileOrDirectory = File | Directory

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: DirectoryFieldsEnum!
  ): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  id
  parent___id
  children
  children___id
  absolutePath
}

input DirectoryFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  absolutePath: StringQueryOperatorInput
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

type File implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  absolutePath: String
  publicURL: String
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

enum FileFieldsEnum {
  id
  parent___id
  children___id
  absolutePath
  publicURL
}

input FileFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  absolutePath: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
}

enum ImageFormat {
  NO_CHANGE
  JPG
  PNG
  WEBP
}

type ImageSharp implements Node {
  id: ID!
  fixed(
    width: Int
    height: Int
    base64Width: Int
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    grayscale: Boolean = false
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
  ): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid

  original: ImageSharpOriginal
  resize(
    width: Int
    height: Int
    quality: Int
    jpegProgressive: Boolean = true
    pngCompressionLevel: Int = 9
    pngCompressionSpeed: Int = 4
    grayscale: Boolean = false
    duotone: DuotoneGradient
    base64: Boolean = false
    traceSVG: Potrace
    toFormat: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
  ): ImageSharpResize
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: ImageSharpFieldsEnum!
  ): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  id
  parent
  children
}

input ImageSharpFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

scalar JSON

# Node Interface
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
}

type PostsJson implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  text: String
  time(
    formatString: String
    fromNow: Boolean
    difference: String
    locale: String
  ): Date
  image: File
}

type PostsJsonConnection {
  totalCount: Int!
  edges: [PostsJsonEdge!]!
  nodes: [PostsJson!]!
  pageInfo: PageInfo!
  distinct(field: PostsJsonFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: PostsJsonFieldsEnum!
  ): [PostsJsonGroupConnection!]!
}

type PostsJsonEdge {
  next: PostsJson
  node: PostsJson!
  previous: PostsJson
}

enum PostsJsonFieldsEnum {
  id
  parent___id
  children___id
  time
  text
  image___absolutePath
  image___publicURL
}

input PostsJsonFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  time: DateQueryOperatorInput
  image: FileFilterInput
}

input PostsJsonFilterListInput {
  elemMatch: PostsJsonFilterInput
}

type PostsJsonGroupConnection {
  totalCount: Int!
  edges: [PostsJsonEdge!]!
  nodes: [PostsJson!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PostsJsonSortInput {
  fields: [PostsJsonFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

type Query {
  allFile(
    filter: FileFilterInput
    sort: FileSortInput
    skip: Int
    limit: Int
  ): FileConnection!
  allImageSharp(
    filter: ImageSharpFilterInput
    sort: ImageSharpSortInput
    skip: Int
    limit: Int
  ): ImageSharpConnection!
  allDirectory(
    filter: DirectoryFilterInput
    sort: DirectorySortInput
    skip: Int
    limit: Int
  ): DirectoryConnection!
  allPostsJson(
    filter: PostsJsonFilterInput
    sort: PostsJsonSortInput
    skip: Int
    limit: Int
  ): PostsJsonConnection!
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}
