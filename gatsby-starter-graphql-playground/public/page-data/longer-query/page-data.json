{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-graphql-playground-src-templates-item-tsx","path":"/longer-query","result":{"data":{"playground":{"slug":"/longer-query","query":"%7B%0A%20%20allSitePlugin%20%7B%0A%20%20%20%20totalCount%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20version%0A%20%20%20%20%20%20%20%20packageJson%20%7B%0A%20%20%20%20%20%20%20%20%20%20description%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Longer Query\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\",\n    \"metastring\": \"preview\",\n    \"preview\": true\n  }, \"{\\n  allSitePlugin {\\n    totalCount\\n    edges {\\n      node {\\n        name\\n        version\\n        packageJson {\\n          description\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Gatsby structures its content as collections of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodes\"), \", which are connected to each other with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edges\"), \". In this query you ask for the total count of plugins in this Gatsby site, along with specific information about each one.\"), mdx(\"p\", null, \"Try using the editor's autocomplete (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl + Space\"), \") to get extended details from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"packageJson\"), \" nodes.\"));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Longer Query"}},"pageContext":{"slug":"/longer-query"}},"staticQueryHashes":["2744905544","3181798408"]}