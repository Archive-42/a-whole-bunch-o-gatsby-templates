{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-graphql-playground-src-templates-item-tsx","path":"/group","result":{"data":{"playground":{"slug":"/group","query":"%7B%0A%20%20allMarkdownRemark(filter:%20%7B%20frontmatter:%20%7B%20title:%20%7B%20ne:%20%22%22%20%7D%20%7D%20%7D)%20%7B%0A%20%20%20%20group(field:%20frontmatter___categories)%20%7B%0A%20%20%20%20%20%20fieldValue%0A%20%20%20%20%20%20totalCount%0A%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20frontmatter%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20nodes%20%7B%0A%20%20%20%20%20%20frontmatter%20%7B%0A%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%20%20categories%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Group\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\",\n    \"metastring\": \"preview\",\n    \"preview\": true\n  }, \"{\\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \\\"\\\" } } }) {\\n    group(field: frontmatter___categories) {\\n      fieldValue\\n      totalCount\\n      edges {\\n        node {\\n          frontmatter {\\n            title\\n          }\\n        }\\n      }\\n    }\\n    nodes {\\n      frontmatter {\\n        title\\n        categories\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"You can also group values on the basis of a field e.g. the title, date or category and get the field value, the total number of occurrences and edges.\"), mdx(\"p\", null, \"The query below gets you all categories (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fieldValue\"), \") applied to a book and how many books (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"totalCount\"), \") a given category is applied to. In addition you are grabbing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" of books in a given category. You can see for example that there are 3 books in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"magical creatures\"), \" category.\"));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Group"}},"pageContext":{"slug":"/group"}},"staticQueryHashes":["2744905544","3181798408"]}