{"expireTime":9007200881222365000,"key":"gatsby-plugin-mdx-entire-payload-829ce20a8bf15442cc1af235603981a2--undefined","val":{"mdast":{"type":"root","children":[{"type":"code","lang":"graphql","meta":"preview","value":"{\n  someEntries: allMarkdownRemark(skip: 3, limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n  someMoreEntries: allMarkdownRemark(limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":23,"column":4,"offset":312},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Want to run two queries on the same datasource? You can do this by aliasing your queries.","position":{"start":{"line":25,"column":1,"offset":314},"end":{"line":25,"column":90,"offset":403},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":314},"end":{"line":25,"column":90,"offset":403},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you use your data, you will be able to reference it using the alias instead of the root query name. In this example, that would be ","position":{"start":{"line":27,"column":1,"offset":405},"end":{"line":27,"column":137,"offset":541},"indent":[]}},{"type":"inlineCode","value":"data.someEntries","position":{"start":{"line":27,"column":137,"offset":541},"end":{"line":27,"column":155,"offset":559},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":27,"column":155,"offset":559},"end":{"line":27,"column":159,"offset":563},"indent":[]}},{"type":"inlineCode","value":"data.someMoreEntries","position":{"start":{"line":27,"column":159,"offset":563},"end":{"line":27,"column":181,"offset":585},"indent":[]}},{"type":"text","value":" instead of ","position":{"start":{"line":27,"column":181,"offset":585},"end":{"line":27,"column":193,"offset":597},"indent":[]}},{"type":"inlineCode","value":"data.allMarkdownRemark","position":{"start":{"line":27,"column":193,"offset":597},"end":{"line":27,"column":217,"offset":621},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":27,"column":217,"offset":621},"end":{"line":27,"column":218,"offset":622},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":405},"end":{"line":27,"column":218,"offset":622},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Aliasing\"}","position":{"start":{"line":30,"column":1,"offset":625},"end":{"line":30,"column":49,"offset":673},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":30,"column":49,"offset":673}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Aliasing\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\",\n    \"metastring\": \"preview\",\n    \"preview\": true\n  }, \"{\\n  someEntries: allMarkdownRemark(skip: 3, limit: 3) {\\n    edges {\\n      node {\\n        frontmatter {\\n          title\\n        }\\n      }\\n    }\\n  }\\n  someMoreEntries: allMarkdownRemark(limit: 3) {\\n    edges {\\n      node {\\n        frontmatter {\\n          title\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Want to run two queries on the same datasource? You can do this by aliasing your queries.\"), mdx(\"p\", null, \"When you use your data, you will be able to reference it using the alias instead of the root query name. In this example, that would be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data.someEntries\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data.someMoreEntries\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data.allMarkdownRemark\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Aliasing\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\",\n        \"metastring\": \"preview\",\n        \"preview\": true\n      }}>{`{\n  someEntries: allMarkdownRemark(skip: 3, limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n  someMoreEntries: allMarkdownRemark(limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Want to run two queries on the same datasource? You can do this by aliasing your queries.`}</p>\n    <p>{`When you use your data, you will be able to reference it using the alias instead of the root query name. In this example, that would be `}<inlineCode parentName=\"p\">{`data.someEntries`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`data.someMoreEntries`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`data.allMarkdownRemark`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}