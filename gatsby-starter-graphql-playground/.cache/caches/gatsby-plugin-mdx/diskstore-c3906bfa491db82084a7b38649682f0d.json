{"expireTime":9007200881222366000,"key":"gatsby-plugin-mdx-entire-payload-459f3c103fbf4526dd7284dea6c2a7aa--undefined","val":{"mdast":{"type":"root","children":[{"type":"code","lang":"graphql","meta":"preview","value":"{\n  allMarkdownRemark(filter: { frontmatter: { date: { ne: null } } }) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":15,"column":4,"offset":239},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Dates can be formatted using the ","position":{"start":{"line":17,"column":1,"offset":241},"end":{"line":17,"column":34,"offset":274},"indent":[]}},{"type":"inlineCode","value":"formatString","position":{"start":{"line":17,"column":34,"offset":274},"end":{"line":17,"column":48,"offset":288},"indent":[]}},{"type":"text","value":" function. Gatsby relies on ","position":{"start":{"line":17,"column":48,"offset":288},"end":{"line":17,"column":76,"offset":316},"indent":[]}},{"type":"link","title":null,"url":"https://momentjs.com/","children":[{"type":"text","value":"Moment.js","position":{"start":{"line":17,"column":77,"offset":317},"end":{"line":17,"column":86,"offset":326},"indent":[]}}],"position":{"start":{"line":17,"column":76,"offset":316},"end":{"line":17,"column":110,"offset":350},"indent":[]}},{"type":"text","value":" to format the dates. This allows you to use any tokens in your string. See ","position":{"start":{"line":17,"column":110,"offset":350},"end":{"line":17,"column":186,"offset":426},"indent":[]}},{"type":"link","title":null,"url":"https://momentjs.com/docs/#/displaying/format/","children":[{"type":"text","value":"moment.js documentation","position":{"start":{"line":17,"column":187,"offset":427},"end":{"line":17,"column":210,"offset":450},"indent":[]}}],"position":{"start":{"line":17,"column":186,"offset":426},"end":{"line":17,"column":259,"offset":499},"indent":[]}},{"type":"text","value":" for more tokens.","position":{"start":{"line":17,"column":259,"offset":499},"end":{"line":17,"column":276,"offset":516},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":241},"end":{"line":17,"column":276,"offset":516},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Format\"}","position":{"start":{"line":20,"column":1,"offset":519},"end":{"line":20,"column":47,"offset":565},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":47,"offset":565}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Format\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\",\n    \"metastring\": \"preview\",\n    \"preview\": true\n  }, \"{\\n  allMarkdownRemark(filter: { frontmatter: { date: { ne: null } } }) {\\n    edges {\\n      node {\\n        frontmatter {\\n          title\\n          date(formatString: \\\"dddd DD MMMM YYYY\\\")\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Dates can be formatted using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"formatString\"), \" function. Gatsby relies on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://momentjs.com/\"\n  }, \"Moment.js\"), \" to format the dates. This allows you to use any tokens in your string. See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://momentjs.com/docs/#/displaying/format/\"\n  }, \"moment.js documentation\"), \" for more tokens.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Format\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\",\n        \"metastring\": \"preview\",\n        \"preview\": true\n      }}>{`{\n  allMarkdownRemark(filter: { frontmatter: { date: { ne: null } } }) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Dates can be formatted using the `}<inlineCode parentName=\"p\">{`formatString`}</inlineCode>{` function. Gatsby relies on `}<a parentName=\"p\" {...{\n        \"href\": \"https://momentjs.com/\"\n      }}>{`Moment.js`}</a>{` to format the dates. This allows you to use any tokens in your string. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://momentjs.com/docs/#/displaying/format/\"\n      }}>{`moment.js documentation`}</a>{` for more tokens.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}