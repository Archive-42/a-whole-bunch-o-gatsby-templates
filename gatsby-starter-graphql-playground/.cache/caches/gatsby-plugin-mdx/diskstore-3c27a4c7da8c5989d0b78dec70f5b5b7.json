{"expireTime":9007200881222365000,"key":"gatsby-plugin-mdx-entire-payload-0cf96c5c7a0cc603e675953cf9ddbf93--undefined","val":{"mdast":{"type":"root","children":[{"type":"code","lang":"graphql","meta":"preview","value":"{\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \"\" } } }) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":15,"column":4,"offset":203},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In this query ","position":{"start":{"line":17,"column":1,"offset":205},"end":{"line":17,"column":15,"offset":219},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":17,"column":15,"offset":219},"end":{"line":17,"column":23,"offset":227},"indent":[]}},{"type":"text","value":" and the ","position":{"start":{"line":17,"column":23,"offset":227},"end":{"line":17,"column":32,"offset":236},"indent":[]}},{"type":"inlineCode","value":"ne","position":{"start":{"line":17,"column":32,"offset":236},"end":{"line":17,"column":36,"offset":240},"indent":[]}},{"type":"text","value":" (not equals) operator is used to show only results that have a title. You can find a good video tutorial on this ","position":{"start":{"line":17,"column":36,"offset":240},"end":{"line":17,"column":150,"offset":354},"indent":[]}},{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=Lg1bom99uGM","children":[{"type":"text","value":"here","position":{"start":{"line":17,"column":151,"offset":355},"end":{"line":17,"column":155,"offset":359},"indent":[]}}],"position":{"start":{"line":17,"column":150,"offset":354},"end":{"line":17,"column":201,"offset":405},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":17,"column":201,"offset":405},"end":{"line":17,"column":202,"offset":406},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":205},"end":{"line":17,"column":202,"offset":406},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Gatsby relies on ","position":{"start":{"line":19,"column":1,"offset":408},"end":{"line":19,"column":18,"offset":425},"indent":[]}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/sift","children":[{"type":"text","value":"Sift","position":{"start":{"line":19,"column":19,"offset":426},"end":{"line":19,"column":23,"offset":430},"indent":[]}}],"position":{"start":{"line":19,"column":18,"offset":425},"end":{"line":19,"column":60,"offset":467},"indent":[]}},{"type":"text","value":" to enable MongoDB-like query syntax for object filtering. This allows Gatsby to support operators like ","position":{"start":{"line":19,"column":60,"offset":467},"end":{"line":19,"column":164,"offset":571},"indent":[]}},{"type":"inlineCode","value":"eq","position":{"start":{"line":19,"column":164,"offset":571},"end":{"line":19,"column":168,"offset":575},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":19,"column":168,"offset":575},"end":{"line":19,"column":170,"offset":577},"indent":[]}},{"type":"inlineCode","value":"ne","position":{"start":{"line":19,"column":170,"offset":577},"end":{"line":19,"column":174,"offset":581},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":19,"column":174,"offset":581},"end":{"line":19,"column":176,"offset":583},"indent":[]}},{"type":"inlineCode","value":"in","position":{"start":{"line":19,"column":176,"offset":583},"end":{"line":19,"column":180,"offset":587},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":19,"column":180,"offset":587},"end":{"line":19,"column":182,"offset":589},"indent":[]}},{"type":"inlineCode","value":"regex","position":{"start":{"line":19,"column":182,"offset":589},"end":{"line":19,"column":189,"offset":596},"indent":[]}},{"type":"text","value":" and querying nested fields through the ","position":{"start":{"line":19,"column":189,"offset":596},"end":{"line":19,"column":229,"offset":636},"indent":[]}},{"type":"inlineCode","value":"__","position":{"start":{"line":19,"column":229,"offset":636},"end":{"line":19,"column":233,"offset":640},"indent":[]}},{"type":"text","value":" connector.","position":{"start":{"line":19,"column":233,"offset":640},"end":{"line":19,"column":244,"offset":651},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":408},"end":{"line":19,"column":244,"offset":651},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is also possible to filter on multiple fields - just separate the individual filters by a comma (works as an AND):","position":{"start":{"line":21,"column":1,"offset":653},"end":{"line":21,"column":118,"offset":770},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":653},"end":{"line":21,"column":118,"offset":770},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"filter: { contentType: { in: [\"post\", \"page\"] }, draft: { eq: false } }","position":{"start":{"line":23,"column":1,"offset":772},"end":{"line":25,"column":4,"offset":861},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Complete list of possible operators","position":{"start":{"line":27,"column":4,"offset":866},"end":{"line":27,"column":39,"offset":901},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":863},"end":{"line":27,"column":39,"offset":901},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"eq","position":{"start":{"line":29,"column":3,"offset":905},"end":{"line":29,"column":7,"offset":909},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":29,"column":7,"offset":909},"end":{"line":29,"column":19,"offset":921},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"equal","position":{"start":{"line":29,"column":21,"offset":923},"end":{"line":29,"column":26,"offset":928},"indent":[]}}],"position":{"start":{"line":29,"column":19,"offset":921},"end":{"line":29,"column":28,"offset":930},"indent":[]}},{"type":"text","value":", must match the given data exactly","position":{"start":{"line":29,"column":28,"offset":930},"end":{"line":29,"column":63,"offset":965},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":905},"end":{"line":29,"column":63,"offset":965},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":903},"end":{"line":29,"column":63,"offset":965},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"ne","position":{"start":{"line":30,"column":3,"offset":968},"end":{"line":30,"column":7,"offset":972},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":30,"column":7,"offset":972},"end":{"line":30,"column":19,"offset":984},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not equal","position":{"start":{"line":30,"column":21,"offset":986},"end":{"line":30,"column":30,"offset":995},"indent":[]}}],"position":{"start":{"line":30,"column":19,"offset":984},"end":{"line":30,"column":32,"offset":997},"indent":[]}},{"type":"text","value":", must be different from the given data","position":{"start":{"line":30,"column":32,"offset":997},"end":{"line":30,"column":71,"offset":1036},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":968},"end":{"line":30,"column":71,"offset":1036},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":966},"end":{"line":30,"column":71,"offset":1036},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"regex","position":{"start":{"line":31,"column":3,"offset":1039},"end":{"line":31,"column":10,"offset":1046},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":31,"column":10,"offset":1046},"end":{"line":31,"column":22,"offset":1058},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"regular expression","position":{"start":{"line":31,"column":24,"offset":1060},"end":{"line":31,"column":42,"offset":1078},"indent":[]}}],"position":{"start":{"line":31,"column":22,"offset":1058},"end":{"line":31,"column":44,"offset":1080},"indent":[]}},{"type":"text","value":", must match the given pattern. Note that backslashes need to be escaped ","position":{"start":{"line":31,"column":44,"offset":1080},"end":{"line":31,"column":117,"offset":1153},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"twice","position":{"start":{"line":31,"column":118,"offset":1154},"end":{"line":31,"column":123,"offset":1159},"indent":[]}}],"position":{"start":{"line":31,"column":117,"offset":1153},"end":{"line":31,"column":124,"offset":1160},"indent":[]}},{"type":"text","value":", so ","position":{"start":{"line":31,"column":124,"offset":1160},"end":{"line":31,"column":129,"offset":1165},"indent":[]}},{"type":"inlineCode","value":"/\\w+/","position":{"start":{"line":31,"column":129,"offset":1165},"end":{"line":31,"column":136,"offset":1172},"indent":[]}},{"type":"text","value":" needs to be written as ","position":{"start":{"line":31,"column":136,"offset":1172},"end":{"line":31,"column":160,"offset":1196},"indent":[]}},{"type":"inlineCode","value":"\"/\\\\\\\\w+/\"","position":{"start":{"line":31,"column":160,"offset":1196},"end":{"line":31,"column":172,"offset":1208},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":31,"column":172,"offset":1208},"end":{"line":31,"column":173,"offset":1209},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1039},"end":{"line":31,"column":173,"offset":1209},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1037},"end":{"line":31,"column":173,"offset":1209},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"glob","position":{"start":{"line":32,"column":3,"offset":1212},"end":{"line":32,"column":9,"offset":1218},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":32,"column":9,"offset":1218},"end":{"line":32,"column":21,"offset":1230},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"global","position":{"start":{"line":32,"column":23,"offset":1232},"end":{"line":32,"column":29,"offset":1238},"indent":[]}}],"position":{"start":{"line":32,"column":21,"offset":1230},"end":{"line":32,"column":31,"offset":1240},"indent":[]}},{"type":"text","value":", allows to use wildcard ","position":{"start":{"line":32,"column":31,"offset":1240},"end":{"line":32,"column":56,"offset":1265},"indent":[]}},{"type":"inlineCode","value":"*","position":{"start":{"line":32,"column":56,"offset":1265},"end":{"line":32,"column":59,"offset":1268},"indent":[]}},{"type":"text","value":" which acts as a placeholder for any non-empty string","position":{"start":{"line":32,"column":59,"offset":1268},"end":{"line":32,"column":112,"offset":1321},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1212},"end":{"line":32,"column":112,"offset":1321},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1210},"end":{"line":32,"column":112,"offset":1321},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"in","position":{"start":{"line":33,"column":3,"offset":1324},"end":{"line":33,"column":7,"offset":1328},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":33,"column":7,"offset":1328},"end":{"line":33,"column":19,"offset":1340},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"in array","position":{"start":{"line":33,"column":21,"offset":1342},"end":{"line":33,"column":29,"offset":1350},"indent":[]}}],"position":{"start":{"line":33,"column":19,"offset":1340},"end":{"line":33,"column":31,"offset":1352},"indent":[]}},{"type":"text","value":", must be an element of the array","position":{"start":{"line":33,"column":31,"offset":1352},"end":{"line":33,"column":64,"offset":1385},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":1324},"end":{"line":33,"column":64,"offset":1385},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1322},"end":{"line":33,"column":64,"offset":1385},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nin","position":{"start":{"line":34,"column":3,"offset":1388},"end":{"line":34,"column":8,"offset":1393},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":34,"column":8,"offset":1393},"end":{"line":34,"column":20,"offset":1405},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not in array","position":{"start":{"line":34,"column":22,"offset":1407},"end":{"line":34,"column":34,"offset":1419},"indent":[]}}],"position":{"start":{"line":34,"column":20,"offset":1405},"end":{"line":34,"column":36,"offset":1421},"indent":[]}},{"type":"text","value":", must NOT be an element of the array","position":{"start":{"line":34,"column":36,"offset":1421},"end":{"line":34,"column":73,"offset":1458},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1388},"end":{"line":34,"column":73,"offset":1458},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1386},"end":{"line":34,"column":73,"offset":1458},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"gt","position":{"start":{"line":35,"column":3,"offset":1461},"end":{"line":35,"column":7,"offset":1465},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":35,"column":7,"offset":1465},"end":{"line":35,"column":19,"offset":1477},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"greater than","position":{"start":{"line":35,"column":21,"offset":1479},"end":{"line":35,"column":33,"offset":1491},"indent":[]}}],"position":{"start":{"line":35,"column":19,"offset":1477},"end":{"line":35,"column":35,"offset":1493},"indent":[]}},{"type":"text","value":", must be greater than given value","position":{"start":{"line":35,"column":35,"offset":1493},"end":{"line":35,"column":69,"offset":1527},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1461},"end":{"line":35,"column":69,"offset":1527},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1459},"end":{"line":35,"column":69,"offset":1527},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"gte","position":{"start":{"line":36,"column":3,"offset":1530},"end":{"line":36,"column":8,"offset":1535},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":36,"column":8,"offset":1535},"end":{"line":36,"column":20,"offset":1547},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"greater than or equal","position":{"start":{"line":36,"column":22,"offset":1549},"end":{"line":36,"column":43,"offset":1570},"indent":[]}}],"position":{"start":{"line":36,"column":20,"offset":1547},"end":{"line":36,"column":45,"offset":1572},"indent":[]}},{"type":"text","value":", must be greater than or equal to given value","position":{"start":{"line":36,"column":45,"offset":1572},"end":{"line":36,"column":91,"offset":1618},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1530},"end":{"line":36,"column":91,"offset":1618},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1528},"end":{"line":36,"column":91,"offset":1618},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"lt","position":{"start":{"line":37,"column":3,"offset":1621},"end":{"line":37,"column":7,"offset":1625},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":37,"column":7,"offset":1625},"end":{"line":37,"column":19,"offset":1637},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"less than","position":{"start":{"line":37,"column":21,"offset":1639},"end":{"line":37,"column":30,"offset":1648},"indent":[]}}],"position":{"start":{"line":37,"column":19,"offset":1637},"end":{"line":37,"column":32,"offset":1650},"indent":[]}},{"type":"text","value":", must be less than given value","position":{"start":{"line":37,"column":32,"offset":1650},"end":{"line":37,"column":63,"offset":1681},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1621},"end":{"line":37,"column":63,"offset":1681},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1619},"end":{"line":37,"column":63,"offset":1681},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"lte","position":{"start":{"line":38,"column":3,"offset":1684},"end":{"line":38,"column":8,"offset":1689},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":38,"column":8,"offset":1689},"end":{"line":38,"column":20,"offset":1701},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"less than or equal","position":{"start":{"line":38,"column":22,"offset":1703},"end":{"line":38,"column":40,"offset":1721},"indent":[]}}],"position":{"start":{"line":38,"column":20,"offset":1701},"end":{"line":38,"column":42,"offset":1723},"indent":[]}},{"type":"text","value":", must be less than or equal to given value","position":{"start":{"line":38,"column":42,"offset":1723},"end":{"line":38,"column":85,"offset":1766},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1684},"end":{"line":38,"column":85,"offset":1766},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1682},"end":{"line":38,"column":85,"offset":1766},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"elemMatch","position":{"start":{"line":39,"column":3,"offset":1769},"end":{"line":39,"column":14,"offset":1780},"indent":[]}},{"type":"text","value":": short for ","position":{"start":{"line":39,"column":14,"offset":1780},"end":{"line":39,"column":26,"offset":1792},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"element match","position":{"start":{"line":39,"column":28,"offset":1794},"end":{"line":39,"column":41,"offset":1807},"indent":[]}}],"position":{"start":{"line":39,"column":26,"offset":1792},"end":{"line":39,"column":43,"offset":1809},"indent":[]}},{"type":"text","value":", this indicates that the field you are filtering will return an array of elements, on which you can apply a filter using the previous operators","position":{"start":{"line":39,"column":43,"offset":1809},"end":{"line":39,"column":187,"offset":1953},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1769},"end":{"line":39,"column":187,"offset":1953},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1767},"end":{"line":39,"column":187,"offset":1953},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":903},"end":{"line":39,"column":187,"offset":1953},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to understand more how these filters work, looking at the corresponding ","position":{"start":{"line":41,"column":1,"offset":1955},"end":{"line":41,"column":85,"offset":2039},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/__tests__/run-query.js","children":[{"type":"text","value":"tests","position":{"start":{"line":41,"column":86,"offset":2040},"end":{"line":41,"column":91,"offset":2045},"indent":[]}}],"position":{"start":{"line":41,"column":85,"offset":2039},"end":{"line":41,"column":190,"offset":2144},"indent":[]}},{"type":"text","value":" in the codebase could be very useful.","position":{"start":{"line":41,"column":190,"offset":2144},"end":{"line":41,"column":228,"offset":2182},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1955},"end":{"line":41,"column":228,"offset":2182},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Filter\"}","position":{"start":{"line":44,"column":1,"offset":2185},"end":{"line":44,"column":47,"offset":2231},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":44,"column":47,"offset":2231}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Filter\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\",\n    \"metastring\": \"preview\",\n    \"preview\": true\n  }, \"{\\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \\\"\\\" } } }) {\\n    totalCount\\n    edges {\\n      node {\\n        frontmatter {\\n          title\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"In this query \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ne\"), \" (not equals) operator is used to show only results that have a title. You can find a good video tutorial on this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=Lg1bom99uGM\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"Gatsby relies on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/sift\"\n  }, \"Sift\"), \" to enable MongoDB-like query syntax for object filtering. This allows Gatsby to support operators like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eq\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ne\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"in\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex\"), \" and querying nested fields through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__\"), \" connector.\"), mdx(\"p\", null, \"It is also possible to filter on multiple fields - just separate the individual filters by a comma (works as an AND):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"filter: { contentType: { in: [\\\"post\\\", \\\"page\\\"] }, draft: { eq: false } }\\n\")), mdx(\"h2\", null, \"Complete list of possible operators\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"eq\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"equal\"), \", must match the given data exactly\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ne\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"not equal\"), \", must be different from the given data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"regex\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"regular expression\"), \", must match the given pattern. Note that backslashes need to be escaped \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"twice\"), \", so \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/\\\\w+/\"), \" needs to be written as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"/\\\\\\\\\\\\\\\\w+/\\\"\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"glob\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"global\"), \", allows to use wildcard \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"*\"), \" which acts as a placeholder for any non-empty string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"in\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"in array\"), \", must be an element of the array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nin\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"not in array\"), \", must NOT be an element of the array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gt\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"greater than\"), \", must be greater than given value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gte\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"greater than or equal\"), \", must be greater than or equal to given value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lt\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"less than\"), \", must be less than given value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lte\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"less than or equal\"), \", must be less than or equal to given value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"elemMatch\"), \": short for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"element match\"), \", this indicates that the field you are filtering will return an array of elements, on which you can apply a filter using the previous operators\")), mdx(\"p\", null, \"If you want to understand more how these filters work, looking at the corresponding \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/__tests__/run-query.js\"\n  }, \"tests\"), \" in the codebase could be very useful.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Filter\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\",\n        \"metastring\": \"preview\",\n        \"preview\": true\n      }}>{`{\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \"\" } } }) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`In this query `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`ne`}</inlineCode>{` (not equals) operator is used to show only results that have a title. You can find a good video tutorial on this `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=Lg1bom99uGM\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`Gatsby relies on `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/sift\"\n      }}>{`Sift`}</a>{` to enable MongoDB-like query syntax for object filtering. This allows Gatsby to support operators like `}<inlineCode parentName=\"p\">{`eq`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ne`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`in`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`regex`}</inlineCode>{` and querying nested fields through the `}<inlineCode parentName=\"p\">{`__`}</inlineCode>{` connector.`}</p>\n    <p>{`It is also possible to filter on multiple fields - just separate the individual filters by a comma (works as an AND):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`filter: { contentType: { in: [\"post\", \"page\"] }, draft: { eq: false } }\n`}</code></pre>\n    <h2>{`Complete list of possible operators`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`eq`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`equal`}</strong>{`, must match the given data exactly`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ne`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`not equal`}</strong>{`, must be different from the given data`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`regex`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`regular expression`}</strong>{`, must match the given pattern. Note that backslashes need to be escaped `}<em parentName=\"li\">{`twice`}</em>{`, so `}<inlineCode parentName=\"li\">{`/\\\\w+/`}</inlineCode>{` needs to be written as `}<inlineCode parentName=\"li\">{`\"/\\\\\\\\\\\\\\\\w+/\"`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`glob`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`global`}</strong>{`, allows to use wildcard `}<inlineCode parentName=\"li\">{`*`}</inlineCode>{` which acts as a placeholder for any non-empty string`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`in`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`in array`}</strong>{`, must be an element of the array`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`nin`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`not in array`}</strong>{`, must NOT be an element of the array`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`gt`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`greater than`}</strong>{`, must be greater than given value`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`gte`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`greater than or equal`}</strong>{`, must be greater than or equal to given value`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`lt`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`less than`}</strong>{`, must be less than given value`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`lte`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`less than or equal`}</strong>{`, must be less than or equal to given value`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`elemMatch`}</inlineCode>{`: short for `}<strong parentName=\"li\">{`element match`}</strong>{`, this indicates that the field you are filtering will return an array of elements, on which you can apply a filter using the previous operators`}</li>\n    </ul>\n    <p>{`If you want to understand more how these filters work, looking at the corresponding `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/__tests__/run-query.js\"\n      }}>{`tests`}</a>{` in the codebase could be very useful.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}