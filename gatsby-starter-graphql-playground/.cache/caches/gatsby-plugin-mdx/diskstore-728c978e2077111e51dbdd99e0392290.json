{"expireTime":9007200881222367000,"key":"gatsby-plugin-mdx-entire-payload-5905688faf5681a0c948d9de6564f995--undefined","val":{"mdast":{"type":"root","children":[{"type":"code","lang":"graphql","meta":"preview","value":"query GetBlogPosts(\n  $limit: Int\n  $filter: MarkdownRemarkFilterInput\n  $sort: MarkdownRemarkSortInput\n) {\n  allMarkdownRemark(limit: $limit, filter: $filter, sort: $sort) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":19,"column":4,"offset":341},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In addition to adding query arguments directly to queries, GraphQL allows to pass in \"query variables\". These can be both simple scalar values as well as objects.","position":{"start":{"line":21,"column":1,"offset":343},"end":{"line":21,"column":163,"offset":505},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":343},"end":{"line":21,"column":163,"offset":505},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The query below is the same one as the previous example, but with the input arguments passed in as \"query variables\".","position":{"start":{"line":23,"column":1,"offset":507},"end":{"line":23,"column":118,"offset":624},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":507},"end":{"line":23,"column":118,"offset":624},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To add variables to page component queries, pass these in the ","position":{"start":{"line":25,"column":1,"offset":626},"end":{"line":25,"column":63,"offset":688},"indent":[]}},{"type":"inlineCode","value":"context","position":{"start":{"line":25,"column":63,"offset":688},"end":{"line":25,"column":72,"offset":697},"indent":[]}},{"type":"text","value":" object ","position":{"start":{"line":25,"column":72,"offset":697},"end":{"line":25,"column":80,"offset":705},"indent":[]}},{"type":"link","title":null,"url":"https://gatsbyjs.org/docs/creating-and-modifying-pages/#creating-pages-in-gatsby-nodejs","children":[{"type":"text","value":"when creating pages","position":{"start":{"line":25,"column":81,"offset":706},"end":{"line":25,"column":100,"offset":725},"indent":[]}}],"position":{"start":{"line":25,"column":80,"offset":705},"end":{"line":25,"column":190,"offset":815},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":25,"column":190,"offset":815},"end":{"line":25,"column":191,"offset":816},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":626},"end":{"line":25,"column":191,"offset":816},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Query Variables\"}","position":{"start":{"line":28,"column":1,"offset":819},"end":{"line":28,"column":56,"offset":874},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":28,"column":56,"offset":874}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Query Variables\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\",\n    \"metastring\": \"preview\",\n    \"preview\": true\n  }, \"query GetBlogPosts(\\n  $limit: Int\\n  $filter: MarkdownRemarkFilterInput\\n  $sort: MarkdownRemarkSortInput\\n) {\\n  allMarkdownRemark(limit: $limit, filter: $filter, sort: $sort) {\\n    edges {\\n      node {\\n        frontmatter {\\n          title\\n          date(formatString: \\\"dddd DD MMMM YYYY\\\")\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"In addition to adding query arguments directly to queries, GraphQL allows to pass in \\\"query variables\\\". These can be both simple scalar values as well as objects.\"), mdx(\"p\", null, \"The query below is the same one as the previous example, but with the input arguments passed in as \\\"query variables\\\".\"), mdx(\"p\", null, \"To add variables to page component queries, pass these in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context\"), \" object \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gatsbyjs.org/docs/creating-and-modifying-pages/#creating-pages-in-gatsby-nodejs\"\n  }, \"when creating pages\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Query Variables\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\",\n        \"metastring\": \"preview\",\n        \"preview\": true\n      }}>{`query GetBlogPosts(\n  $limit: Int\n  $filter: MarkdownRemarkFilterInput\n  $sort: MarkdownRemarkSortInput\n) {\n  allMarkdownRemark(limit: $limit, filter: $filter, sort: $sort) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`In addition to adding query arguments directly to queries, GraphQL allows to pass in \"query variables\". These can be both simple scalar values as well as objects.`}</p>\n    <p>{`The query below is the same one as the previous example, but with the input arguments passed in as \"query variables\".`}</p>\n    <p>{`To add variables to page component queries, pass these in the `}<inlineCode parentName=\"p\">{`context`}</inlineCode>{` object `}<a parentName=\"p\" {...{\n        \"href\": \"https://gatsbyjs.org/docs/creating-and-modifying-pages/#creating-pages-in-gatsby-nodejs\"\n      }}>{`when creating pages`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}