{"expireTime":9007200881222366000,"key":"gatsby-plugin-mdx-entire-payload-0d466edea2ab7a4e816c5c7ef308a46b--undefined","val":{"mdast":{"type":"root","children":[{"type":"code","lang":"graphql","meta":"preview","value":"{\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \"\" } } }) {\n    group(field: frontmatter___categories) {\n      fieldValue\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n    nodes {\n      frontmatter {\n        title\n        categories\n      }\n    }\n  }\n}","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":24,"column":4,"offset":366},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can also group values on the basis of a field e.g. the title, date or category and get the field value, the total number of occurrences and edges.","position":{"start":{"line":26,"column":1,"offset":368},"end":{"line":26,"column":151,"offset":518},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":368},"end":{"line":26,"column":151,"offset":518},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The query below gets you all categories (","position":{"start":{"line":28,"column":1,"offset":520},"end":{"line":28,"column":42,"offset":561},"indent":[]}},{"type":"inlineCode","value":"fieldValue","position":{"start":{"line":28,"column":42,"offset":561},"end":{"line":28,"column":54,"offset":573},"indent":[]}},{"type":"text","value":") applied to a book and how many books (","position":{"start":{"line":28,"column":54,"offset":573},"end":{"line":28,"column":94,"offset":613},"indent":[]}},{"type":"inlineCode","value":"totalCount","position":{"start":{"line":28,"column":94,"offset":613},"end":{"line":28,"column":106,"offset":625},"indent":[]}},{"type":"text","value":") a given category is applied to. In addition you are grabbing the ","position":{"start":{"line":28,"column":106,"offset":625},"end":{"line":28,"column":173,"offset":692},"indent":[]}},{"type":"inlineCode","value":"title","position":{"start":{"line":28,"column":173,"offset":692},"end":{"line":28,"column":180,"offset":699},"indent":[]}},{"type":"text","value":" of books in a given category. You can see for example that there are 3 books in the ","position":{"start":{"line":28,"column":180,"offset":699},"end":{"line":28,"column":265,"offset":784},"indent":[]}},{"type":"inlineCode","value":"magical creatures","position":{"start":{"line":28,"column":265,"offset":784},"end":{"line":28,"column":284,"offset":803},"indent":[]}},{"type":"text","value":" category.","position":{"start":{"line":28,"column":284,"offset":803},"end":{"line":28,"column":294,"offset":813},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":520},"end":{"line":28,"column":294,"offset":813},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Group\"}","position":{"start":{"line":31,"column":1,"offset":816},"end":{"line":31,"column":46,"offset":861},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":31,"column":46,"offset":861}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Group\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\",\n    \"metastring\": \"preview\",\n    \"preview\": true\n  }, \"{\\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \\\"\\\" } } }) {\\n    group(field: frontmatter___categories) {\\n      fieldValue\\n      totalCount\\n      edges {\\n        node {\\n          frontmatter {\\n            title\\n          }\\n        }\\n      }\\n    }\\n    nodes {\\n      frontmatter {\\n        title\\n        categories\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"You can also group values on the basis of a field e.g. the title, date or category and get the field value, the total number of occurrences and edges.\"), mdx(\"p\", null, \"The query below gets you all categories (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fieldValue\"), \") applied to a book and how many books (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"totalCount\"), \") a given category is applied to. In addition you are grabbing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" of books in a given category. You can see for example that there are 3 books in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"magical creatures\"), \" category.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Group\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\",\n        \"metastring\": \"preview\",\n        \"preview\": true\n      }}>{`{\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \"\" } } }) {\n    group(field: frontmatter___categories) {\n      fieldValue\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n    nodes {\n      frontmatter {\n        title\n        categories\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`You can also group values on the basis of a field e.g. the title, date or category and get the field value, the total number of occurrences and edges.`}</p>\n    <p>{`The query below gets you all categories (`}<inlineCode parentName=\"p\">{`fieldValue`}</inlineCode>{`) applied to a book and how many books (`}<inlineCode parentName=\"p\">{`totalCount`}</inlineCode>{`) a given category is applied to. In addition you are grabbing the `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` of books in a given category. You can see for example that there are 3 books in the `}<inlineCode parentName=\"p\">{`magical creatures`}</inlineCode>{` category.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}